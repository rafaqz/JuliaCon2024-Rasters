---
title: "Rasters.jl"
subtitle: "A DimensionalData extension for GeoSpatial data reading, writing and manipulation"
author:
  - name: Rafael Schouten
    orcid:
    email: rafaelschouten@gmail.com
    affiliation:
      - name: Globe Intstitute, Copenhagen University
      - department: Section for Biodiversity
date: "2024-07-10"
engine: julia
format:
  revealjs:
    theme: [serif, style.scss] # beige blood dark default league moon night serif simple sky solarized
    incremental: true
    toc: false
    toc-depth: 2
    slide-number: true
    overview: true
    code-line-numbers: false
execute:
    echo: true
---

## Read/Write Backends

- Netcdf/hdf5
- GeoTIFF and other GDAL compatible formats
- Gribb (read only)
- Zarr (PR nearly done!)
- R grd (simple mmapped data from R)

## Backend detection

```julia
# Single array
rast = Raster("myrasterfile.ext")

# Multi-array
st = RasterStack("myrasterstack.ext")

# Series of rasters or stacks may be detectable from folders
st = RasterSeries("myrasterfolder", Ti(DateTime))
```

# Lazy loading

For manipulating larger-than-memory data

## DiskArrays.jl integration  

Loads dimension names, lookups and other metadata up front with
`lazy=true` keyword in constructors:

```julia
rast = Raster(filename; lazy=true)
```

Still lazy after broadcasts:
```julia
rast .* 10
```

## Change chunk patterned for more efficient lazy reads:
\
```julia
write("rechunked.tif", raster; chunks=(256, 256))
```

```julia

RasterStack("myrasterstack.ext")
```


## RasterDataSources.jl integration

```{julia}
#| echo: false
ENV["RASTERDATASOURCES_PATH"] = "/home/raf/Data/Raster";
```
\
Load a raster the standard way, from a filename:

```{julia}
using Rasters, ArchGDAL, RasterDataSources, CairoMakie
bioclim_filename = RasterDataSources.getraster(WorldClim{BioClim}, 5)
bioclim5 = Raster(bioclim_filename);
```
\
Or use RasterDataSources syntax directly:

```{julia}
bioclim_filename = Raster(WorldClim{BioClim}, 5);
```

# Plotting

## Plots.jl

```{julia}
using Plots
Plots.plot(bioclim5)
```

## Makie.jl

```{julia}
#| echo: false
using CairoMakie
CairoMakie.activate!(type = "png")
```

```{julia}
using CairoMakie
Makie.plot(bioclim5)
```

## GeoMakie.jl

```{julia}
using GeoMakie
fig = Figure();
ga = GeoAxis(fig[1, 1]; dest="+proj=ortho +lon_0=19 +lat_0=72")
Makie.heatmap!(ga, bioclim5; colormap=:isoluminant_cgo_70_c39_n256)
fig
```

# Common GIS methods

---

## `mask`, `trim`

```{julia}
#| echo: false
using Rasters, RasterDataSources, ArchGDAL, NaturalEarth, Plots, Dates, DataFrames
using Rasters: trim
```

```{julia}
countries = DataFrame(naturalearth("ne_10m_admin_0_countries"))
norway_border = subset(countries, :NAME => ByRow(==("Norway"))).geometry[1]
climate = RasterStack(WorldClim{Climate}, (:tmin, :tmax, :prec, :wind); month=July)
norway_climate = trim(mask(climate; with=norway_border)[Y=0 .. 90]; pad=10)
Plots.plot(norway_climate; size=(1000, 500))
```

## `extract`

Extract climate data at species occurrence points:

```{julia}
#| code-overflow: scroll
using Rasters, GBIF2, RasterDataSources
records = GBIF2.occurrence_search("Burramys parvus")
A = RasterStack(WorldClim{BioClim})
climate = extract(A, records; name=(:bio1, :bio4, :bio7)) |> DataFrame
```

## `zonal` statistics

Hottest and coldest countries in July:

```{julia}
#| echo: false
using Rasters, RasterDataSources, ArchGDAL, Dates, DataFrames, NaturalEarth, Statistics
```

```{julia}
countries = DataFrame(naturalearth("ne_10m_admin_0_countries"))
clim = Raster(WorldClim{Climate}, :tmax; month=July)
countries.july_maxtemp = zonal(Statistics.mean, clim; 
    of=countries, boundary=:touches, progress=false
)
sort!(subset(countries, :july_maxtemp => ByRow(!isnan)), :july_maxtemp).NAME
```

